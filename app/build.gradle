buildscript {
    ext.kotlin_version = '1.3.41'
    ext.rx_version = '2.0.0'
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.github.triplet.gradle:play-publisher:1.2.0'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-android-extensions:$kotlin_version"
    }
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'jacoco'
apply plugin: 'com.github.triplet.play'

repositories {
    mavenCentral()
    jcenter()
    google()
    maven { url("https://jitpack.io") }
    maven { url('https://oss.sonatype.org/content/repositories/snapshots/') }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "androidx.appcompat:appcompat:1.0.2"
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation "androidx.recyclerview:recyclerview:1.0.0"
    implementation 'com.github.bumptech.glide:glide:4.3.1'
    implementation 'com.github.rahatarmanahmed:circularprogressview:2.5.0'
    implementation 'com.github.salomonbrys.kodein:kodein:4.1.0'
    implementation 'com.github.unhappychoice:circleci:0.2.1'
    implementation 'com.github.unhappychoice:rxsnackbar:0.1.2'
    implementation 'com.google.android.material:material:1.0.0'
    implementation 'com.google.code.gson:gson:2.7'
    implementation "com.jakewharton.rxbinding2:rxbinding-kotlin:$rx_version"
    implementation "com.jakewharton.rxbinding2:rxbinding-support-v4-kotlin:$rx_version"
    implementation "com.jakewharton.rxbinding2:rxbinding-appcompat-v7-kotlin:$rx_version"
    implementation "com.jakewharton.rxbinding2:rxbinding-design-kotlin:$rx_version"
    implementation "com.jakewharton.rxbinding2:rxbinding-recyclerview-v7-kotlin:$rx_version"
    implementation 'com.squareup.flow:flow:1.0.0-alpha3'
    implementation 'com.squareup.mortar:mortar:0.20'
    implementation 'com.pusher:pusher-java-client:1.4.0'
    implementation 'de.hdodenhof:circleimageview:2.1.0'
    implementation "io.reactivex.rxjava2:rxkotlin:$rx_version"
    implementation "io.reactivex.rxjava2:rxandroid:$rx_version"
    implementation 'jp.takuji31.koreference:koreference:1.1.0'
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    testImplementation 'junit:junit:4.12'
    testImplementation ("com.nhaarman:mockito-kotlin:1.4.0") { exclude group: 'org.jetbrains.kotlin' }
    testImplementation ("com.winterbe:expekt:0.5.0") { exclude group: 'org.jetbrains.kotlin' }
    testImplementation ("io.polymorphicpanda.kspec:kspec-core:0.4.0") { exclude group: 'org.jetbrains.kotlin' }
    testImplementation ("io.polymorphicpanda.kspec:kspec-junit-runner:0.4.0") { exclude group: 'org.jetbrains.kotlin' }
    testImplementation 'org.robolectric:robolectric:3.3.2'
}

android {
    compileSdkVersion 29
    buildToolsVersion '29.0.0'

    signingConfigs {
        release {
            if (System.getenv("RELEASE_KEYSTORE_BASE64") != null) {
                storeFile = decodeFileFromBase64Env('RELEASE_KEYSTORE_BASE64', "tmp_ks_", ".jks")
                storePassword = System.getenv('RELEASE_KEYSTORE_PASSWORD')
                keyAlias = System.getenv('RELEASE_KEYSTORE_KEY_ALIAS')
                keyPassword = System.getenv('RELEASE_KEYSTORE_KEY_PASSWORD')
            }
        }
    }
    buildTypes {
        debug {
            minifyEnabled false
            debuggable true
            testCoverageEnabled true
        }
        release {
            minifyEnabled false
            debuggable false
            testCoverageEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            if (System.getenv("RELEASE_KEYSTORE_BASE64") != null) {
                signingConfig = signingConfigs.release
            }
        }
    }
    playAccountConfigs {
        defaultAccountConfig {
            serviceAccountEmail = 'unhappychoice@gmail.com'
            jsonFile = decodeFileFromBase64Env("PLAY_ACCOUNT_JSON_BASE64", "norimaki", "json")
        }
    }
    defaultConfig {
        applicationId "com.unhappychoice.norimaki"
        minSdkVersion 16
        targetSdkVersion 29
        versionCode System.getenv("CIRCLE_BUILD_NUM") as Integer ?: 1
        versionName "1.0.3"
        multiDexEnabled true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        playAccountConfig = playAccountConfigs.defaultAccountConfig
    }
    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        test.java.srcDirs += 'src/test/kotlin'
    }
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
        exclude 'META-INF/rxjava.properties'
        exclude 'META-INF/rxkotlin.properties'
    }
    testOptions {
        unitTests {
            all {
                jacoco {
                    includeNoLocationClasses = true
                }
            }
        }
    }
}

jacoco {
    toolVersion = '0.7.6.201602180812'
}

task jacoco(type: JacocoReport, dependsOn: "testDebugUnitTest") {
    reports {
        xml.enabled = true
        html.enabled = true
    }
    classDirectories = fileTree(
            dir: './build/intermediates/classes/debug',
            excludes: [
                    '**/R.class',
                    '**/R$*.class',
                    '**/BuildConfig.class',
                    '**/Manifest*.*',
                    '**/*$inlined$*.*',
            ]
    )
    sourceDirectories = files('src/main/kotlin')
    executionData = files('build/jacoco/testDebugUnitTest.exec')
}

static decodeFileFromBase64Env(String name, String fileName, String ext) {
    String base64String = System.getenv(name)
    if (base64String == null) return null
    File tempFile = File.createTempFile(fileName, ext, File.createTempDir())
    FileOutputStream fos = null
    try {
        fos = new FileOutputStream(tempFile)
        fos.write(base64String.decodeBase64())
        fos.flush()
    } finally {
        if (fos != null) {
            fos.close()
        }
    }
    return tempFile
}
