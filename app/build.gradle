buildscript {
    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }
}

plugins {
    id 'com.android.application'
    id 'com.github.triplet.play' version '3.7.0'
    id 'jacoco'
}

apply plugin: 'kotlin-android'

repositories {
    mavenCentral()
    google()
    jcenter()
    maven { url("https://jitpack.io") }
    maven { url('https://oss.sonatype.org/content/repositories/snapshots/') }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "androidx.appcompat:appcompat:1.5.1"
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation "androidx.recyclerview:recyclerview:1.2.1"
    implementation 'com.github.bumptech.glide:glide:4.14.2'
    implementation 'com.github.rahatarmanahmed:circularprogressview:2.5.0'
    implementation 'com.github.unhappychoice:circleci:0.3.0'
    implementation 'com.github.unhappychoice:rxsnackbar:1.0.0'
    implementation 'com.gojuno.koptional:koptional:1.7.0'
    implementation 'com.google.android.material:material:1.7.0'
    implementation 'com.google.code.gson:gson:2.9.1'
    implementation "com.jakewharton.rxbinding2:rxbinding-kotlin:2.2.0"
    implementation "com.jakewharton.rxbinding2:rxbinding-support-v4-kotlin:2.2.0"
    implementation "com.jakewharton.rxbinding2:rxbinding-appcompat-v7-kotlin:2.2.0"
    implementation "com.jakewharton.rxbinding2:rxbinding-design-kotlin:2.2.0"
    implementation "com.jakewharton.rxbinding2:rxbinding-recyclerview-v7-kotlin:2.2.0"
    implementation 'com.squareup.flow:flow:1.0.0-alpha4-SNAPSHOT'
    implementation 'com.squareup.mortar:mortar:0.20'
    implementation 'com.pusher:pusher-java-client:2.4.3'
    implementation 'de.hdodenhof:circleimageview:3.1.0'
    implementation "io.reactivex.rxjava2:rxkotlin:2.4.0"
    implementation "io.reactivex.rxjava2:rxandroid:2.1.1"
    implementation 'com.github.takuji31.Koreference:koreference:2.0.0'
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    implementation 'org.kodein.di:kodein-di:7.15.0'
    testImplementation 'junit:junit:4.13.2'
    testImplementation ("com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0") { exclude group: 'org.jetbrains.kotlin' }
    testImplementation ("com.winterbe:expekt:0.5.0") { exclude group: 'org.jetbrains.kotlin' }
    testImplementation ("io.polymorphicpanda.kspec:kspec-core:0.4.0") { exclude group: 'org.jetbrains.kotlin' }
    testImplementation ("io.polymorphicpanda.kspec:kspec-junit-runner:0.4.0") { exclude group: 'org.jetbrains.kotlin' }
    testImplementation 'org.robolectric:robolectric:4.9'
}

android {
    compileSdkVersion 33
    buildToolsVersion '30.0.2'

    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    signingConfigs {
        release {
            if (System.getenv("RELEASE_KEYSTORE_BASE64") != null) {
                storeFile decodeFileFromBase64Env('RELEASE_KEYSTORE_BASE64', "tmp_ks_", ".jks")
                storePassword System.getenv('RELEASE_KEYSTORE_PASSWORD')
                keyAlias System.getenv('RELEASE_KEYSTORE_KEY_ALIAS')
                keyPassword System.getenv('RELEASE_KEYSTORE_KEY_PASSWORD')
            }
        }
    }
    buildTypes {
        debug {
            minifyEnabled false
            debuggable true
            testCoverageEnabled true
        }
        release {
            minifyEnabled false
            debuggable false
            testCoverageEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            if (System.getenv("RELEASE_KEYSTORE_BASE64") != null) {
                signingConfig signingConfigs.release
            }
        }
    }
    buildFeatures {
        viewBinding true
    }
    defaultConfig {
        applicationId "com.unhappychoice.norimaki"
        minSdkVersion 16
        targetSdkVersion 33
        versionCode System.getenv("CIRCLE_BUILD_NUM") as Integer ?: 1
        versionName "1.1.0"
        multiDexEnabled true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        test.java.srcDirs += 'src/test/kotlin'
    }
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
        exclude 'META-INF/rxjava.properties'
        exclude 'META-INF/rxkotlin.properties'
    }
    testOptions {
        unitTests {
            all {
                jacoco {
                    includeNoLocationClasses = true
                }
            }
        }
    }
}

play {
    enabled = System.getenv("RELEASE_KEYSTORE_BASE64") != null
    serviceAccountCredentials.set(decodeFileFromBase64Env("PLAY_ACCOUNT_JSON_BASE64", "norimaki", ".json"))
}

jacoco {
    toolVersion = "0.8.7"
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}

task jacoco(type: JacocoReport, dependsOn: ["testDebugUnitTest"]) {
    description = "Generate Jacoco coverage reports after running tests."
    reports {
        xml.enabled true
        html.enabled true
        classDirectories.setFrom(
                files(
                        fileTree(
                                dir: './build/intermediates/javac/debug/compileDebugJavaWithJavac/classes',
                                excludes: ['**/R.class', '**/R$*.class', '**/BuildConfig.class', '**/Manifest*.*', '**/*$inlined$*.*']
                        ) + fileTree(
                                dir: './build/tmp/kotlin-classes/debug',
                                excludes: ['**/R.class', '**/R$*.class', '**/BuildConfig.class', '**/Manifest*.*', '**/*$inlined$*.*']
                        )
                )
        )
        sourceDirectories.from files('src/main/kotlin')
        executionData.from file('build/jacoco/testDebugUnitTest.exec')
    }
}

static decodeFileFromBase64Env(String name, String fileName, String ext) {
    String base64String = System.getenv(name)
    if (base64String == null) return null
    File tempFile = File.createTempFile(fileName, ext, File.createTempDir())
    FileOutputStream fos = null
    try {
        fos = new FileOutputStream(tempFile)
        fos.write(base64String.decodeBase64())
        fos.flush()
    } finally {
        if (fos != null) {
            fos.close()
        }
    }
    return tempFile
}
